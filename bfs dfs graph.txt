#include <stdio.h>
#include <stdlib.h>

#define MAX 100

int graph[MAX][MAX];
int visited[MAX];
int queue[MAX], front = 0, rear = -1;
int vertices;

void addEdge(int u, int v) {
    graph[u][v] = 1;
    graph[v][u] = 1; // Undirected Graph
}

void BFS(int start) {
    for (int i = 0; i < vertices; i++)
        visited[i] = 0;

    front = 0;
    rear = -1;
    queue[++rear] = start;
    visited[start] = 1;

    printf("BFS Traversal: ");
    while (front <= rear) {
        int current = queue[front++];
        printf("%d ", current);

        for (int i = 0; i < vertices; i++) {
            if (graph[current][i] && !visited[i]) {
                queue[++rear] = i;
                visited[i] = 1;
            }
        }
    }
    printf("\n");
}

void DFSUtil(int node) {
    visited[node] = 1;
    printf("%d ", node);

    for (int i = 0; i < vertices; i++) {
        if (graph[node][i] && !visited[i]) {
            DFSUtil(i);
        }
    }
}

void DFS(int start) {
    for (int i = 0; i < vertices; i++)
        visited[i] = 0;

    printf("DFS Traversal: ");
    DFSUtil(start);
    printf("\n");
}

int main() {
    int edges, u, v, start;

    printf("Enter number of vertices: ");
    scanf("%d", &vertices);

    printf("Enter number of edges: ");
    scanf("%d", &edges);

    for (int i = 0; i < edges; i++) {
        printf("Enter edge (u v): ");
        scanf("%d %d", &u, &v);
        addEdge(u, v);
    }

    printf("Enter starting vertex for traversal: ");
    scanf("%d", &start);

    BFS(start);
    DFS(start);

    return 0;
}
